name: CI
on:
  pull_request:
    types: [opened, reopened]
  push:
    branches: ["**"]

jobs:
  test:
    name: Run tests and linters
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: docker://docker.io/library/golang:1.17.1-alpine@sha256:13919fb9091f6667cb375d5fdf016ecd6d3a5d5995603000d422b04583de4ef9
        name: Run go vet
        env:
          CGO_ENABLED: "0"
        with:
          entrypoint: go
          args: vet ./...
      - uses: docker://docker.io/library/golang:1.17.1-alpine@sha256:13919fb9091f6667cb375d5fdf016ecd6d3a5d5995603000d422b04583de4ef9
        name: Run go vet (receiver)
        env:
          CGO_ENABLED: "0"
        with:
          entrypoint: go
          args: vet ./...
          workdir: ./receiver
      - uses: docker://docker.io/library/golang:1.17.1-alpine@sha256:13919fb9091f6667cb375d5fdf016ecd6d3a5d5995603000d422b04583de4ef9
        name: Run all tests
        env:
          CGO_ENABLED: "0"
        with:
          entrypoint: go
          args: test -v ./...
      - uses: docker://docker.io/library/golang:1.17.1-alpine@sha256:13919fb9091f6667cb375d5fdf016ecd6d3a5d5995603000d422b04583de4ef9
        name: Run all tests (receiver)
        env:
          CGO_ENABLED: "0"
        with:
          entrypoint: go
          args: test -v ./...
          workdir: ./receiver
      - uses: docker://docker.io/library/golang:1.17.1-alpine@sha256:13919fb9091f6667cb375d5fdf016ecd6d3a5d5995603000d422b04583de4ef9
        name: Ensure main package is functional
        env:
          CGO_ENABLED: "0"
        with:
          entrypoint: go
          args: run ./ -help
  build:
    needs: test
    name: Build the binary
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        GOOS: [linux, darwin]
        GOARCH: [amd64, arm64]
    steps:
      - uses: actions/checkout@v2
      - uses: docker://docker.io/library/golang:1.17.1-alpine@sha256:13919fb9091f6667cb375d5fdf016ecd6d3a5d5995603000d422b04583de4ef9
        env:
          GOOS: ${{ matrix.GOOS }}
          GOARCH: ${{ matrix.GOARCH }}
          CGO_ENABLED: "0"
        with:
          entrypoint: go
          args: build
      - uses: actions/upload-artifact@v2
        with:
          name: hubble-otel-${{ matrix.GOOS }}-${{ matrix.GOARCH }}
          path: hubble-otel

  images:
    needs: test
    name: Build container images
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: docker://quay.io/cilium/image-maker:e8f1fa622dfad4250723d55bc6a3dd6d1f0f13cd
        env:
          ANY_REGISTRY_DISABLE: true
          DOCKER_HUB_PUBLIC_ACCESS_ONLY: true
          GHCR_USERNAME: $GITHUB_ACTOR
          GHCR_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
        with:
          entrypoint: make
          args: images.hubble-otel images.otelcol PUSH=true WITHOUT_TAG_SUFFIX=true

